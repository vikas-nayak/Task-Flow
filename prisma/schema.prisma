// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  clerkId      String  @unique
  name         String?
  email        String?
  profileImage String?
  tier         String? @default("Free")
  credits      String? @default("10")
googleResourceId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DiscordWebhook DiscordWebhook[]
  Notion         Notion[]
  Slack          Slack[]
  Gmail          Gmail[]
  connections    Connections[]
  workflows      Workflows[]
  GmailTemplate  GmailTemplate[]
}

model Gmail {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  refreshToken  String
  email         String?
  expiryDate    BigInt
  
  User          User          @relation(fields: [userId], references: [clerkId])
  userId        String        @unique
  connections   Connections[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model LocalGoogleCredential {
  id          String @id @default(uuid())
  accessToken String @unique

  folderId   String?
  pageToken  String?
  channelId  String  @unique @default(uuid())
  subscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int @unique
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  user        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Slack {
  id String @id @default(uuid())

  appId            String
  authedUserId     String
  authedUserToken  String @unique
  slackAccessToken String @unique
  botUserId        String
  teamId           String
  teamName         String

  User        User          @relation(fields: [userId], references: [clerkId])
  userId      String
  connections Connections[]
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  databaseId    String        @unique
  workspaceName String?
  workspaceIcon String?
  User          User          @relation(fields: [userId], references: [clerkId])
  userId        String
  connections   Connections[]
}

model GmailTemplate {
  id        String   @id @default(cuid())
  userId    String
  to        String
  subject   String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [clerkId])
}

model Connections {
  id               String          @id @default(uuid())
  type             String          @unique
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  discordWebhookId String?
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  notionId         String?
  Gmail            Gmail?          @relation(fields: [gmailId], references: [id])
  gmailId          String?
  User             User?           @relation(fields: [userId], references: [clerkId])
  userId           String?
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  slackId          String?
}

model Workflows {
  id                String   @id @default(uuid())
  nodes             Json?
  edges             Json?
  name              String
  discordTemplate   String?
  notionTemplate    String?
  slackTemplate     String?
  gmailTo          String?
  gmailSubject     String?
  gmailBody        String?
  slackChannels     String[]
  slackAccessToken  String?
  notionAccessToken String?
  notionDbId        String?
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  description       String
  userId            String
  User              User     @relation(fields: [userId], references: [clerkId])
}